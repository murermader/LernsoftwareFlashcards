Allgemeines TODO File:

Refactoring Code?
  -Ich (rafael) kann nicht gut einschätzen, wie viel Sinn / wie gut lesbar der Code ist, weil ich
  die meiste Klassenlogik selbst geschrieben habe. Schaut euch doch bitte mal an, und sagt mir ob
  das verständlich ist, dass man das gegebennenfalls dann refactorn kann.

in Data:
  -Methode zum Stapel sortieren (Zum Beispiel: Karten mit niedrigem Level zuerst,
  oder Karten deren Abfragedatum am ältesten ist). Könnte ein neues Deck in Data erstellen, vlt
  "deckSorted" oder soetwas in der Art. Oder einfach das unsortierte Deck überschreiben
  -Methode zum "ready" machen. Es sollen alle Karten entfernt werden die noch nicht
  abgefragt werden sollen. (Es gibt schon eine ready Methode, allerdings bin ich mir nicht sicher
  ob diese schon funktionert)

JavaFX:
  -CardAddFXML umbauen: Hier sollen generell alle Stapel bearbeitet werden
    -Das Fenster soll beinhalten:
      -Liste mit allen Decks.
      -Liste mit allen Karten eines Decks (nach Auswahl eines Decks).
      -Möglichkeit Karten zu löschen (vlt Löschen Button der SelectedItem löscht?).
      -Möglichkeit Karte zu bearbeiten (neues Fenster aufmachen mit 2 Textboxen für Vorder-
      und Rückseite, um den Text zu editieren).
      -Möglichkeit Karte hinzuzufügen (gleiches Fenster wie Karte bearbeiten, nur diesmal mit
      leeren Textboxen).

-------------------------Zukünftige Features----------------------------------------------

Feature: Mehrere Benutzer:
  -neue Klasse mit:
    -Namen des Benutzers
    -Namen der Decks des Benutzers
    -eigenen Ordner für Karten des Benutzers.
    -Falls Lernhistorie / Statistik umgesetzt wird, sollte jeder Nutzer natürlich seine eigene
    haben.
  -Wird beim Starten der App abgefragt, mit einer Liste kann man dann seinen Benutzer aussuchen
    -Optional mit Passworteingabe: Aber dass dieses Feature sinn macht, müsste man auch
    die Lernkarten verschlüsseln, da sonst das Passwort recht wenig bringt, da das
    Passwort sonst keine weitere Privatsfähre bringt, wenn es leicht umgangen werden kann
    -Jeder Nutzer bräuchte seinen eigenen Schlüssel um seine Decks zu entschlüssen, die nur
    das Programm lesen kann. Passwort wohl eher nicht so nützlich, aber ich denke sehr interessant
    umzusetzen.

Lernhistorie / Nutzerhistorie
  -Wie soll diese aussehen? Man könnte zum Beispiel speichern wann eine Karte beantwortet wird,
  und für wie schwer diese Frage empfunden wurde.
  -Anzeige: Vlt als Graph? Umsetzung könnte schwierig werden, aber mit genug Zeit auf jedenfall
  machbar.
  -Daten wie gesamte Nutzung, wann ein Deck erstellt wurde, welche Decks am öftestens abgefragt
  werden etc, könnte man zusätzlich speichern
  -Umsetzung, Sammeln der Daten vlt mit einer neuen Klasse, die in unseren Controllern aktiv ist,
  und so beispielsweiße alles mitschreibt wie ein Log?

Cloudspeicherung der Daten:
  -welcher Anbieter? Wie Daten Speichern? Einfach die txt hochladen beim speichern, und
  runterladen beim starten? Wie sieht es mit offline Nutzung aus?